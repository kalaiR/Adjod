from django.db import models
from django.contrib.auth.models import User
from paypal.standard.ipn.models import PayPalIPN
from adjod.models import ExchangeRate, UserProfile
from advertisement.models import PremiumPriceInfo, Product
from banner.models import PostBanner, BannerPlan
from django.conf import settings

TRANS_MODE = (('online', 'Online'), ('offline', 'Offline'))
TRANS_TYPE = (('banner', 'Banner'), ('account_subcscription', 'Account Subscription'), ('product_subcscription', 'Product Subscription'))
PAYMENT_STATUS = (('pending', 'Pending'), ('completed', 'Completed'))

class Order(models.Model):
    """Its store user purchase order"""
    banner = models.ForeignKey(PostBanner, null=True, blank=True)
    banner_plan = models.ForeignKey(BannerPlan, null=True, blank=True)
    product = models.ForeignKey(Product, null=True, blank=True)
    subscription_plan = models.ForeignKey(PremiumPriceInfo, null=True, blank=True)

    def __unicode__(self):
        return unicode(self.pk)

class Transaction(models.Model):
  
  userprofile = models.ForeignKey(UserProfile)
  transaction_mode = models.CharField(
        max_length=50,
        choices=TRANS_MODE,
        help_text='User used transaction type',
        verbose_name='Transaction',
        )
  amount = models.DecimalField(default=0.0, max_digits=10, decimal_places=2, help_text="Total paid amount including TAX")
  transaction_type = models.CharField(
        max_length=50,
        choices=TRANS_TYPE,
        help_text='Transaction for Banner or Event'
    )
  order = models.ForeignKey(Order, null=True, blank=True)
  paypal = models.OneToOneField(PayPalIPN, null=True, blank=True)
  account_no = models.BigIntegerField(
    help_text='If transaction is offline mode enter the account no or card details',
    verbose_name='Account no or Card No',
    null=True,
    blank=True,
    )
  base_currency = models.CharField(default=settings.BASE_CURRENCY, blank=True,
    max_length=6)
  base_exchange_rate = models.DecimalField(default=1, decimal_places=4,
    blank=True, max_digits=10)
  payment_status = models.CharField(
        max_length=50,
        choices=PAYMENT_STATUS,
        help_text='',
        verbose_name='Payment Status',null=True, blank=True
        )
  created = models.DateTimeField(auto_now_add=True, help_text="Auto generated by system.")
  modified = models.DateTimeField(auto_now_add=True, auto_now=True, help_text="Auto generated by system.")

  def save(self, *args, **kwargs):
    if not self.base_exchange_rate or \
      not self.base_currency:
      tbc = ExchangeRate.ToBaseCurrency
      amount, exchange_rate = tbc(self.amount, self.currency)

      self.base_amount = amount
      self.base_exchange_rate = exchange_rate
      self.base_currency = ExchangeRate.BaseCurrency()

    super(Transaction, self).save(*args, **kwargs)

  def __unicode__(self):
    return str(self.reference)
